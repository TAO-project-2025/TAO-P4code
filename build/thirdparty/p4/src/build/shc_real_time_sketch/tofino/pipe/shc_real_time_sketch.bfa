version:
  version: 1.0.1
  run_id: "6418b0c6e71b6f3c"
  target: Tofino
phv ingress:
  ig_intr_md.ingress_port: H0(0..8)
  hdr.ethernet.dst_addr.0-31: TW5
  hdr.ethernet.dst_addr.32-47: TH10
  hdr.ethernet.src_addr.0-31: TW4
  hdr.ethernet.src_addr.32-47: TH9
  hdr.ethernet.ether_type: TH8
  hdr.ipv4.version: TH7(12..15)
  hdr.ipv4.ihl: TH7(8..11)
  hdr.ipv4.dscp: TH7(2..7)
  hdr.ipv4.ecn: TH7(0..1)
  hdr.ipv4.total_len.0-7: TB2
  hdr.ipv4.total_len.8-15: TB3
  hdr.ipv4.identification.0-7: TB0
  hdr.ipv4.identification.8-15: TB1
  hdr.ipv4.flags: TW1(29..31)
  hdr.ipv4.frag_offset: TW1(16..28)
  hdr.ipv4.ttl: TW1(8..15)
  hdr.ipv4.protocol: TW1(0..7)
  hdr.ipv4.hdr_checksum: TW9(0..15)
  hdr.ipv4.src_addr: W4
  hdr.ipv4.dst_addr: W1
  hdr.udp.src_port: TW3(16..31)
  hdr.udp.dst_port: TW3(0..15)
  hdr.udp.length: TW2(16..31)
  hdr.udp.checksum: TW2(0..15)
  hdr.vxlan.flags: TH3(8..15)
  hdr.vxlan.reserved.0-15: TH2
  hdr.vxlan.reserved.16-23: TH3(0..7)
  hdr.vxlan.vni.0-7: TH0(8..15)
  hdr.vxlan.vni.8-23: TH1
  hdr.vxlan.reserved2: TH0(0..7)
  hdr.inner_ethernet.dst_addr.0-31: TW7
  hdr.inner_ethernet.dst_addr.32-39: TB6
  hdr.inner_ethernet.dst_addr.40-47: TB7
  hdr.inner_ethernet.src_addr.0-31: TW6
  hdr.inner_ethernet.src_addr.32-39: TB4
  hdr.inner_ethernet.src_addr.40-47: TB5
  hdr.inner_ethernet.ether_type: TH11
  hdr.inner_ipv4.version: TH6(12..15)
  hdr.inner_ipv4.ihl: TH6(8..11)
  hdr.inner_ipv4.dscp: TH6(2..7)
  hdr.inner_ipv4.ecn: TH6(0..1)
  hdr.inner_ipv4.total_len: TH5
  hdr.inner_ipv4.identification: TH4
  hdr.inner_ipv4.flags: TW0(29..31)
  hdr.inner_ipv4.frag_offset: TW0(16..28)
  hdr.inner_ipv4.ttl: TW0(8..15)
  hdr.inner_ipv4.protocol: TW0(0..7)
  hdr.inner_ipv4.hdr_checksum: TW8(0..15)
  hdr.inner_ipv4.src_addr: W3
  hdr.inner_ipv4.dst_addr: W0
  hdr.cuckoo_hashes.cuckoo_hash1: W6
  hdr.cuckoo_hashes.cuckoo_hash2: W7
  hdr.cuckoo_hashes.cuckoo_hash3: W8
  hdr.cuckoo_hashes.cuckoo_hash4: W9
  ig_md.src_addr: W5
  ig_md.dst_addr: W2
  ig_md.cuckoo_hash_tmp: W10(0..15)
  ig_md.fingerprint: W13(16..31)
  ig_md.fp_cmp_re: B1(3)
  ig_md.cs_count: W10(18..25)
  ig_md.hash_index_done: B2(7)
  ig_md.table_hit: B1(1)
  ig_md.eflag: B1(2)
  ig_md.nhop_id.0-1: W10(16..17)
  ig_md.nhop_id.2-15: W12(2..15)
  ig_md.nhop_id.16-31: W13(0..15)
  ig_md.cuckoo_hash_index.0-15: W11(0..15)
  ig_md.cuckoo_hash_index.16-31: W12(16..31)
  ig_md.ac_count: W14
  ig_intr_md_for_tm.ucast_egress_port: H1(0..8)
  ig_intr_md_for_tm.bypass_egress: B1(0)
  ig_intr_md_for_dprsr.digest_type: B0(0..2)
  hdr.ethernet.$valid: B2(0)
  hdr.ipv4.$valid: B2(1)
  hdr.udp.$valid: B2(2)
  hdr.vxlan.$valid: B2(3)
  hdr.inner_ethernet.$valid: B2(4)
  hdr.inner_ipv4.$valid: B2(5)
  hdr.cuckoo_hashes.$valid: B2(6)
  context_json:
    B0:
    - { name : ig_intr_md_for_dprsr.digest_type, live_start : 7, live_end : deparser, mutually_exclusive_with: [  ] }
    B1:
    - { name : ig_md.fp_cmp_re, live_start : 4, live_end : 5, mutually_exclusive_with: [  ] }
    - { name : ig_md.table_hit, live_start : 2, live_end : 7, mutually_exclusive_with: [  ] }
    - { name : ig_md.eflag, live_start : 6, live_end : 7, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md_for_tm.bypass_egress, live_start : 1, live_end : deparser, mutually_exclusive_with: [  ] }
    B2:
    - { name : ig_md.hash_index_done, live_start : 4, live_end : 5, mutually_exclusive_with: [  ] }
    - { name : hdr.ethernet.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ipv4.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.udp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.vxlan.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.inner_ethernet.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.inner_ipv4.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.cuckoo_hashes.$valid, live_start : parser, live_end : 2, mutually_exclusive_with: [  ] }
    H0:
    - { name : ig_intr_md.ingress_port, live_start : parser, live_end : 1, mutually_exclusive_with: [  ] }
    H1:
    - { name : ig_intr_md_for_tm.ucast_egress_port, live_start : 1, live_end : deparser, mutually_exclusive_with: [  ] }
    W0:
    - { name : hdr.inner_ipv4.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W1:
    - { name : hdr.ipv4.dst_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W2:
    - { name : ig_md.dst_addr, live_start : 0, live_end : deparser, mutually_exclusive_with: [  ] }
    W3:
    - { name : hdr.inner_ipv4.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W4:
    - { name : hdr.ipv4.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W5:
    - { name : ig_md.src_addr, live_start : 0, live_end : deparser, mutually_exclusive_with: [  ] }
    W6:
    - { name : hdr.cuckoo_hashes.cuckoo_hash1, live_start : parser, live_end : 3, mutually_exclusive_with: [  ] }
    W7:
    - { name : hdr.cuckoo_hashes.cuckoo_hash2, live_start : parser, live_end : 3, mutually_exclusive_with: [  ] }
    W8:
    - { name : hdr.cuckoo_hashes.cuckoo_hash3, live_start : parser, live_end : 3, mutually_exclusive_with: [  ] }
    W9:
    - { name : hdr.cuckoo_hashes.cuckoo_hash4, live_start : parser, live_end : 3, mutually_exclusive_with: [  ] }
    W10:
    - { name : ig_md.cuckoo_hash_tmp, live_start : 2, live_end : 3, mutually_exclusive_with: [  ] }
    - { name : ig_md.cs_count, live_start : 5, live_end : 6, mutually_exclusive_with: [  ] }
    - { name : ig_md.nhop_id, live_start : 1, live_end : 3, mutually_exclusive_with: [  ] }
    W11:
    - { name : ig_md.cuckoo_hash_index, live_start : 2, live_end : 5, mutually_exclusive_with: [  ] }
    W12:
    - { name : ig_md.nhop_id, live_start : 1, live_end : 3, mutually_exclusive_with: [  ] }
    - { name : ig_md.cuckoo_hash_index, live_start : 2, live_end : 5, mutually_exclusive_with: [  ] }
    W13:
    - { name : ig_md.fingerprint, live_start : 2, live_end : 4, mutually_exclusive_with: [  ] }
    - { name : ig_md.nhop_id, live_start : 1, live_end : 3, mutually_exclusive_with: [  ] }
    W14:
    - { name : ig_md.ac_count, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
phv egress:
  eg_intr_md.egress_port: H16(0..8)
  context_json:
    H16:
    - { name : eg_intr_md.egress_port, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
parser ingress:
  start: $entry_point
  init_zero: [ W5, W2, W10, W13, B1, B2, W12, W11, W14 ]
  bitwise_or: [ B2 ]
  hdr_len_adj: 16
  states:
    $entry_point:
      *:
        load: { half : 28..29 }
        buf_req: 30
        next: start
    start:
      match: [ half ]
      0x0800:
        0..1: H0  # bit[7..15] -> H0 bit[8..0]: ingress::ig_intr_md.ingress_port
        16..17: TH10  # ingress::hdr.ethernet.dst_addr[47:32].32-47
        18..21: TW5  # ingress::hdr.ethernet.dst_addr[31:0].0-31
        22..23: TH9  # ingress::hdr.ethernet.src_addr[47:32].32-47
        24..27: TW4  # ingress::hdr.ethernet.src_addr[31:0].0-31
        28..29: TH8  # ingress::hdr.ethernet.ether_type
        B2: 1  # value 1 -> B2 bit[0]: ingress::hdr.ethernet.$valid
        shift: 30
        buf_req: 30
        next: parse_ipv4
      0x****:
        0..1: H0  # bit[7..15] -> H0 bit[8..0]: ingress::ig_intr_md.ingress_port
        16..17: TH10  # ingress::hdr.ethernet.dst_addr[47:32].32-47
        18..21: TW5  # ingress::hdr.ethernet.dst_addr[31:0].0-31
        22..23: TH9  # ingress::hdr.ethernet.src_addr[47:32].32-47
        24..27: TW4  # ingress::hdr.ethernet.src_addr[31:0].0-31
        28..29: TH8  # ingress::hdr.ethernet.ether_type
        B2: 1  # value 1 -> B2 bit[0]: ingress::hdr.ethernet.$valid
        shift: 30
        buf_req: 30
        next: end
    parse_ipv4:
      *:
        0..1: TH7
            # - bit[0..3] -> TH7 bit[15..12]: ingress::hdr.ipv4.version
            # - bit[4..7] -> TH7 bit[11..8]: ingress::hdr.ipv4.ihl
            # - bit[8..13] -> TH7 bit[7..2]: ingress::hdr.ipv4.dscp
            # - bit[14..15] -> TH7 bit[1..0]: ingress::hdr.ipv4.ecn
        2: TB3  # ingress::hdr.ipv4.total_len[15:8].8-15
        3: TB2  # ingress::hdr.ipv4.total_len[7:0].0-7
        4: TB1  # ingress::hdr.ipv4.identification[15:8].8-15
        5: TB0  # ingress::hdr.ipv4.identification[7:0].0-7
        6..9: TW1
            # - bit[48..50] -> TW1 bit[31..29]: ingress::hdr.ipv4.flags
            # - bit[51..63] -> TW1 bit[28..16]: ingress::hdr.ipv4.frag_offset
            # - bit[64..71] -> TW1 bit[15..8]: ingress::hdr.ipv4.ttl
            # - bit[72..79] -> TW1 bit[7..0]: ingress::hdr.ipv4.protocol
        8..11: TW9  # bit[80..95] -> TW9 bit[15..0]: ingress::hdr.ipv4.hdr_checksum
        12..15: W4  # ingress::hdr.ipv4.src_addr
        16..19: W1  # ingress::hdr.ipv4.dst_addr
        load: { byte1 : 9 }
        shift: 20
        buf_req: 20
        next: parse_ipv4.$split_0
    parse_ipv4.$split_0:
      match: [ byte1 ]
      0x11:
        B2: 2  # value 1 -> B2 bit[1]: ingress::hdr.ipv4.$valid
        load: { half : 2..3 }
        buf_req: 4
        next: parse_udp
      0x64:
        B2: 2  # value 1 -> B2 bit[1]: ingress::hdr.ipv4.$valid
        buf_req: 0
        next: parse_cuckoo_hashes
      0x**:
        B2: 2  # value 1 -> B2 bit[1]: ingress::hdr.ipv4.$valid
        buf_req: 0
        next: end
    parse_udp:
      match: [ half ]
      0x12b5:
        0..3: TW3
            # - bit[0..15] -> TW3 bit[31..16]: ingress::hdr.udp.src_port
            # - bit[16..31] -> TW3 bit[15..0]: ingress::hdr.udp.dst_port
        4..7: TW2
            # - bit[32..47] -> TW2 bit[31..16]: ingress::hdr.udp.length
            # - bit[48..63] -> TW2 bit[15..0]: ingress::hdr.udp.checksum
        B2: 4  # value 1 -> B2 bit[2]: ingress::hdr.udp.$valid
        shift: 8
        buf_req: 8
        next: parse_vxlan
      0x****:
        0..3: TW3
            # - bit[0..15] -> TW3 bit[31..16]: ingress::hdr.udp.src_port
            # - bit[16..31] -> TW3 bit[15..0]: ingress::hdr.udp.dst_port
        4..7: TW2
            # - bit[32..47] -> TW2 bit[31..16]: ingress::hdr.udp.length
            # - bit[48..63] -> TW2 bit[15..0]: ingress::hdr.udp.checksum
        B2: 4  # value 1 -> B2 bit[2]: ingress::hdr.udp.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_vxlan:
      *:
        0..1: TH3
            # - bit[0..7] -> TH3 bit[15..8]: ingress::hdr.vxlan.flags
            # - bit[8..15] -> TH3 bit[7..0]: ingress::hdr.vxlan.reserved[23:16].16-23
        2..3: TH2  # ingress::hdr.vxlan.reserved[15:0].0-15
        4..5: TH1  # ingress::hdr.vxlan.vni[23:8].8-23
        6..7: TH0
            # - bit[48..55] -> TH0 bit[15..8]: ingress::hdr.vxlan.vni[7:0].0-7
            # - bit[56..63] -> TH0 bit[7..0]: ingress::hdr.vxlan.reserved2
        8: TB7  # ingress::hdr.inner_ethernet.dst_addr[47:40].40-47
        9: TB6  # ingress::hdr.inner_ethernet.dst_addr[39:32].32-39
        10..13: TW7  # ingress::hdr.inner_ethernet.dst_addr[31:0].0-31
        14: TB5  # ingress::hdr.inner_ethernet.src_addr[47:40].40-47
        15: TB4  # ingress::hdr.inner_ethernet.src_addr[39:32].32-39
        16..19: TW6  # ingress::hdr.inner_ethernet.src_addr[31:0].0-31
        load: { half : 20..21 }
        shift: 20
        buf_req: 22
        next: parse_vxlan.$split_0
    parse_vxlan.$split_0:
      match: [ half ]
      0x0800:
        0..1: TH11  # ingress::hdr.inner_ethernet.ether_type
        B2: 24
            # - value 1 -> B2 bit[3]: ingress::hdr.vxlan.$valid
            # - value 1 -> B2 bit[4]: ingress::hdr.inner_ethernet.$valid
        load: { byte1 : 11 }
        shift: 2
        buf_req: 12
        next: parse_inner_ipv4
      0x****:
        0..1: TH11  # ingress::hdr.inner_ethernet.ether_type
        B2: 24
            # - value 1 -> B2 bit[3]: ingress::hdr.vxlan.$valid
            # - value 1 -> B2 bit[4]: ingress::hdr.inner_ethernet.$valid
        shift: 2
        buf_req: 2
        next: end
    parse_inner_ipv4:
      match: [ byte1 ]
      0x64:
        0..1: TH6
            # - bit[0..3] -> TH6 bit[15..12]: ingress::hdr.inner_ipv4.version
            # - bit[4..7] -> TH6 bit[11..8]: ingress::hdr.inner_ipv4.ihl
            # - bit[8..13] -> TH6 bit[7..2]: ingress::hdr.inner_ipv4.dscp
            # - bit[14..15] -> TH6 bit[1..0]: ingress::hdr.inner_ipv4.ecn
        2..3: TH5  # ingress::hdr.inner_ipv4.total_len
        4..5: TH4  # ingress::hdr.inner_ipv4.identification
        6..9: TW0
            # - bit[48..50] -> TW0 bit[31..29]: ingress::hdr.inner_ipv4.flags
            # - bit[51..63] -> TW0 bit[28..16]: ingress::hdr.inner_ipv4.frag_offset
            # - bit[64..71] -> TW0 bit[15..8]: ingress::hdr.inner_ipv4.ttl
            # - bit[72..79] -> TW0 bit[7..0]: ingress::hdr.inner_ipv4.protocol
        8..11: TW8  # bit[80..95] -> TW8 bit[15..0]: ingress::hdr.inner_ipv4.hdr_checksum
        12..15: W3  # ingress::hdr.inner_ipv4.src_addr
        16..19: W0  # ingress::hdr.inner_ipv4.dst_addr
        B2: 32  # value 1 -> B2 bit[5]: ingress::hdr.inner_ipv4.$valid
        shift: 20
        buf_req: 20
        next: parse_cuckoo_hashes
      0x**:
        0..1: TH6
            # - bit[0..3] -> TH6 bit[15..12]: ingress::hdr.inner_ipv4.version
            # - bit[4..7] -> TH6 bit[11..8]: ingress::hdr.inner_ipv4.ihl
            # - bit[8..13] -> TH6 bit[7..2]: ingress::hdr.inner_ipv4.dscp
            # - bit[14..15] -> TH6 bit[1..0]: ingress::hdr.inner_ipv4.ecn
        2..3: TH5  # ingress::hdr.inner_ipv4.total_len
        4..5: TH4  # ingress::hdr.inner_ipv4.identification
        6..9: TW0
            # - bit[48..50] -> TW0 bit[31..29]: ingress::hdr.inner_ipv4.flags
            # - bit[51..63] -> TW0 bit[28..16]: ingress::hdr.inner_ipv4.frag_offset
            # - bit[64..71] -> TW0 bit[15..8]: ingress::hdr.inner_ipv4.ttl
            # - bit[72..79] -> TW0 bit[7..0]: ingress::hdr.inner_ipv4.protocol
        8..11: TW8  # bit[80..95] -> TW8 bit[15..0]: ingress::hdr.inner_ipv4.hdr_checksum
        12..15: W3  # ingress::hdr.inner_ipv4.src_addr
        16..19: W0  # ingress::hdr.inner_ipv4.dst_addr
        B2: 32  # value 1 -> B2 bit[5]: ingress::hdr.inner_ipv4.$valid
        shift: 20
        buf_req: 20
        next: end
    parse_cuckoo_hashes:
      *:
        0..3: W6  # ingress::hdr.cuckoo_hashes.cuckoo_hash1
        4..7: W7  # ingress::hdr.cuckoo_hashes.cuckoo_hash2
        8..11: W8  # ingress::hdr.cuckoo_hashes.cuckoo_hash3
        12..15: W9  # ingress::hdr.cuckoo_hashes.cuckoo_hash4
        B2: 64  # value 1 -> B2 bit[6]: ingress::hdr.cuckoo_hashes.$valid
        shift: 16
        buf_req: 16
        next: end
deparser ingress:
  dictionary:
    TH10: B2(0)  # ingress::hdr.ethernet.dst_addr.32-47 if ingress::hdr.ethernet.$valid
    TW5: B2(0)  # ingress::hdr.ethernet.dst_addr.0-31 if ingress::hdr.ethernet.$valid
    TH9: B2(0)  # ingress::hdr.ethernet.src_addr.32-47 if ingress::hdr.ethernet.$valid
    TW4: B2(0)  # ingress::hdr.ethernet.src_addr.0-31 if ingress::hdr.ethernet.$valid
    TH8: B2(0)  # ingress::hdr.ethernet.ether_type if ingress::hdr.ethernet.$valid
    TH7: B2(1)
        # - bit[15..12]: ingress::hdr.ipv4.version if ingress::hdr.ipv4.$valid
        # - bit[11..8]: ingress::hdr.ipv4.ihl if ingress::hdr.ipv4.$valid
        # - bit[7..2]: ingress::hdr.ipv4.dscp if ingress::hdr.ipv4.$valid
        # - bit[1..0]: ingress::hdr.ipv4.ecn if ingress::hdr.ipv4.$valid
    TB3: B2(1)  # ingress::hdr.ipv4.total_len.8-15 if ingress::hdr.ipv4.$valid
    TB2: B2(1)  # ingress::hdr.ipv4.total_len.0-7 if ingress::hdr.ipv4.$valid
    TB1: B2(1)  # ingress::hdr.ipv4.identification.8-15 if ingress::hdr.ipv4.$valid
    TB0: B2(1)  # ingress::hdr.ipv4.identification.0-7 if ingress::hdr.ipv4.$valid
    TW1: B2(1)
        # - bit[31..29]: ingress::hdr.ipv4.flags if ingress::hdr.ipv4.$valid
        # - bit[28..16]: ingress::hdr.ipv4.frag_offset if ingress::hdr.ipv4.$valid
        # - bit[15..8]: ingress::hdr.ipv4.ttl if ingress::hdr.ipv4.$valid
        # - bit[7..0]: ingress::hdr.ipv4.protocol if ingress::hdr.ipv4.$valid
    full_checksum 0: B2(1)  # ingress::hdr.ipv4.$valid
    W4: B2(1)  # ingress::hdr.ipv4.src_addr if ingress::hdr.ipv4.$valid
    W1: B2(1)  # ingress::hdr.ipv4.dst_addr if ingress::hdr.ipv4.$valid
    TW3: B2(2)
        # - bit[31..16]: ingress::hdr.udp.src_port if ingress::hdr.udp.$valid
        # - bit[15..0]: ingress::hdr.udp.dst_port if ingress::hdr.udp.$valid
    TW2: B2(2)
        # - bit[31..16]: ingress::hdr.udp.length if ingress::hdr.udp.$valid
        # - bit[15..0]: ingress::hdr.udp.checksum if ingress::hdr.udp.$valid
    TH3: B2(3)
        # - bit[15..8]: ingress::hdr.vxlan.flags if ingress::hdr.vxlan.$valid
        # - bit[7..0]: ingress::hdr.vxlan.reserved.16-23 if ingress::hdr.vxlan.$valid
    TH2: B2(3)  # ingress::hdr.vxlan.reserved.0-15 if ingress::hdr.vxlan.$valid
    TH1: B2(3)  # ingress::hdr.vxlan.vni.8-23 if ingress::hdr.vxlan.$valid
    TH0: B2(3)
        # - bit[15..8]: ingress::hdr.vxlan.vni.0-7 if ingress::hdr.vxlan.$valid
        # - bit[7..0]: ingress::hdr.vxlan.reserved2 if ingress::hdr.vxlan.$valid
    TB7: B2(4)  # ingress::hdr.inner_ethernet.dst_addr.40-47 if ingress::hdr.inner_ethernet.$valid
    TB6: B2(4)  # ingress::hdr.inner_ethernet.dst_addr.32-39 if ingress::hdr.inner_ethernet.$valid
    TW7: B2(4)  # ingress::hdr.inner_ethernet.dst_addr.0-31 if ingress::hdr.inner_ethernet.$valid
    TB5: B2(4)  # ingress::hdr.inner_ethernet.src_addr.40-47 if ingress::hdr.inner_ethernet.$valid
    TB4: B2(4)  # ingress::hdr.inner_ethernet.src_addr.32-39 if ingress::hdr.inner_ethernet.$valid
    TW6: B2(4)  # ingress::hdr.inner_ethernet.src_addr.0-31 if ingress::hdr.inner_ethernet.$valid
    TH11: B2(4)  # ingress::hdr.inner_ethernet.ether_type if ingress::hdr.inner_ethernet.$valid
    TH6: B2(5)
        # - bit[15..12]: ingress::hdr.inner_ipv4.version if ingress::hdr.inner_ipv4.$valid
        # - bit[11..8]: ingress::hdr.inner_ipv4.ihl if ingress::hdr.inner_ipv4.$valid
        # - bit[7..2]: ingress::hdr.inner_ipv4.dscp if ingress::hdr.inner_ipv4.$valid
        # - bit[1..0]: ingress::hdr.inner_ipv4.ecn if ingress::hdr.inner_ipv4.$valid
    TH5: B2(5)  # ingress::hdr.inner_ipv4.total_len if ingress::hdr.inner_ipv4.$valid
    TH4: B2(5)  # ingress::hdr.inner_ipv4.identification if ingress::hdr.inner_ipv4.$valid
    TW0: B2(5)
        # - bit[31..29]: ingress::hdr.inner_ipv4.flags if ingress::hdr.inner_ipv4.$valid
        # - bit[28..16]: ingress::hdr.inner_ipv4.frag_offset if ingress::hdr.inner_ipv4.$valid
        # - bit[15..8]: ingress::hdr.inner_ipv4.ttl if ingress::hdr.inner_ipv4.$valid
        # - bit[7..0]: ingress::hdr.inner_ipv4.protocol if ingress::hdr.inner_ipv4.$valid
    full_checksum 1: B2(5)  # ingress::hdr.inner_ipv4.$valid
    W3: B2(5)  # ingress::hdr.inner_ipv4.src_addr if ingress::hdr.inner_ipv4.$valid
    W0: B2(5)  # ingress::hdr.inner_ipv4.dst_addr if ingress::hdr.inner_ipv4.$valid
  partial_checksum 0: 
    - TH7: { }
        # - bit[15..12]: ingress::hdr.ipv4.version
        # - bit[11..8]: ingress::hdr.ipv4.ihl
        # - bit[7..2]: ingress::hdr.ipv4.dscp
        # - bit[1..0]: ingress::hdr.ipv4.ecn
    - TB3: { swap: 1 }  # ingress::hdr.ipv4.total_len.8-15
    - TB2: { }  # ingress::hdr.ipv4.total_len.0-7
    - TB1: { swap: 1 }  # ingress::hdr.ipv4.identification.8-15
    - TB0: { }  # ingress::hdr.ipv4.identification.0-7
    - TW1: { }
        # - bit[31..29]: ingress::hdr.ipv4.flags
        # - bit[28..16]: ingress::hdr.ipv4.frag_offset
        # - bit[15..8]: ingress::hdr.ipv4.ttl
        # - bit[7..0]: ingress::hdr.ipv4.protocol
    - W4: { }  # ingress::hdr.ipv4.src_addr
    - W1: { }  # ingress::hdr.ipv4.dst_addr
  full_checksum 0: 
    - partial_checksum 0: { }
  partial_checksum 1: 
    - TH6: { }
        # - bit[15..12]: ingress::hdr.inner_ipv4.version
        # - bit[11..8]: ingress::hdr.inner_ipv4.ihl
        # - bit[7..2]: ingress::hdr.inner_ipv4.dscp
        # - bit[1..0]: ingress::hdr.inner_ipv4.ecn
    - TH5: { }  # ingress::hdr.inner_ipv4.total_len
    - TH4: { }  # ingress::hdr.inner_ipv4.identification
    - TW0: { }
        # - bit[31..29]: ingress::hdr.inner_ipv4.flags
        # - bit[28..16]: ingress::hdr.inner_ipv4.frag_offset
        # - bit[15..8]: ingress::hdr.inner_ipv4.ttl
        # - bit[7..0]: ingress::hdr.inner_ipv4.protocol
    - W3: { }  # ingress::hdr.inner_ipv4.src_addr
    - W0: { }  # ingress::hdr.inner_ipv4.dst_addr
  full_checksum 1: 
    - partial_checksum 1: { }
  egress_unicast_port: H1(0..8)  # bit[8..0]: ingress::ig_intr_md_for_tm.ucast_egress_port
  bypss_egr: B1(0..0)  # bit[0]: ingress::ig_intr_md_for_tm.bypass_egress
  learning:
    select: B0(0..2)  # bit[2..0]: ingress::ig_intr_md_for_dprsr.digest_type
    1:
      - B0(0..2)  # bit[2..0]: ingress::ig_intr_md_for_dprsr.digest_type
      - W5  # ingress::ig_md.src_addr
      - W2  # ingress::ig_md.dst_addr
      - W14  # ingress::ig_md.ac_count
    context_json:
      1:
        - [ ig_md.src_addr, 1, 32, 7, 0]
        - [ ig_md.dst_addr, 5, 32, 7, 0]
        - [ ig_md.ac_count, 9, 32, 7, 0]
      name: [ ShcIngressDeparser.flowkey_digest ]
parser egress:
  start: $entry_point.start
  hdr_len_adj: 27
  meta_opt: 8191
  states:
    $entry_point.start:
      *:
        0..1: H16  # bit[7..15] -> H16 bit[8..0]: egress::eg_intr_md.egress_port
        intr_md: 9
        shift: 27
        buf_req: 27
        next: end
deparser egress:
  dictionary: {}
  egress_unicast_port: H16(0..8)  # bit[8..0]: egress::eg_intr_md.egress_port
stage 0 ingress:
  phase0_match ShcIngressParser.$PORT_METADATA:
    p4:
      name: ShcIngressParser.$PORT_METADATA
      size: 288
      preferred_match_type: exact
      match_type: exact
    size: 288
    p4_param_order:
      ig_intr_md.ingress_port: { type: exact, size: 9 }
    format: {ig_intr_md: 0..63}
    constant_value: 0
    actions:
      set_port_metadata:
      - handle: 0x20000000
      - p4_param_order: { ig_intr_md: 64 } 
  ternary_match sk_count_pkt_num_table 0:
    p4: { name: ShcIngress.sk.count_pkt_num_table, size: 1 }
    gateway:
      name: cond-8
      input_xbar:
        exact group 0: { 1: hdr.ipv4.$valid }
      row: 0
      bus: 1
      unit: 1
      match: { 1: hdr.ipv4.$valid }
      0b******1: run_table
      miss:  END
      condition: 
        expression: "(hdr.ipv4.$valid == 1)"
        true:  sk_count_pkt_num_table
        false:  END
    hit: [  tbl_shc_real_time_sketch449 ]
    miss:  tbl_shc_real_time_sketch449
    indirect: sk_count_pkt_num_table$tind
  stateful sk_count_pkt_num_table$salu.ShcIngress.sk.pkt_num:
    p4: { name: ShcIngress.sk.pkt_num, size: 1 }
    row: 15
    logical_bus: S
    column: [ 0, 1 ]
    maprams: [ 0, 1 ]
    home_row: 15
    format: { lo: 32 }
    actions:
      sk_pkt_num_count:
      - saddu lo, lo, 1
      - output alu_lo
  ternary_indirect sk_count_pkt_num_table$tind:
    row: 0
    bus: 1
    format: { action: 0..0, meter_addr: 1..10, meter_pfe: 11..11, meter_type: 12..14 }
    stateful: sk_count_pkt_num_table$salu.ShcIngress.sk.pkt_num(meter_addr, meter_pfe, meter_type)
    instruction: sk_count_pkt_num_table$tind(action, $DEFAULT)
    actions:
      ShcIngress.sk.count_pkt_num(1, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x2000000f
      - next_table: 0
      - sk_count_pkt_num_table$salu.ShcIngress.sk.pkt_num(sk_pkt_num_count, 0)
    default_action: ShcIngress.sk.count_pkt_num
  ternary_match tbl_shc_real_time_sketch449 1:
    p4: { name: tbl_shc_real_time_sketch449, hidden: true }
    gateway:
      name: cond-9
      input_xbar:
        exact group 0: { 5: hdr.inner_ipv4.$valid }
      row: 0
      bus: 0
      unit: 0
      match: { 5: hdr.inner_ipv4.$valid }
      0b**1: run_table
      miss:  tbl_shc_real_time_sketch453
      condition: 
        expression: "(hdr.inner_ipv4.$valid == 1)"
        true:  tbl_shc_real_time_sketch449
        false:  tbl_shc_real_time_sketch453
    hit: [  route_tbl_0 ]
    miss:  route_tbl_0
    indirect: tbl_shc_real_time_sketch449$tind
  ternary_indirect tbl_shc_real_time_sketch449$tind:
    row: 0
    bus: 0
    format: { action: 0..0 }
    instruction: tbl_shc_real_time_sketch449$tind(action, $DEFAULT)
    actions:
      shc_real_time_sketch449(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000001
      - next_table: 0
      - set ig_md.src_addr, hdr.inner_ipv4.src_addr
      - set ig_md.dst_addr, hdr.inner_ipv4.dst_addr
    default_action: shc_real_time_sketch449
  ternary_match tbl_shc_real_time_sketch453 2:
    p4: { name: tbl_shc_real_time_sketch453, hidden: true }
    hit: [  route_tbl_0 ]
    miss:  route_tbl_0
    indirect: tbl_shc_real_time_sketch453$tind
  ternary_indirect tbl_shc_real_time_sketch453$tind:
    row: 1
    bus: 0
    format: { action: 0..0 }
    instruction: tbl_shc_real_time_sketch453$tind(action, $DEFAULT)
    actions:
      shc_real_time_sketch453(0, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000002
      - next_table: 0
      - set ig_md.src_addr, hdr.ipv4.src_addr
      - set ig_md.dst_addr, hdr.ipv4.dst_addr
    default_action: shc_real_time_sketch453
stage 1 ingress:
  dependency: match
  exact_match route_tbl_0 0:
    p4: { name: ShcIngress.route_tbl, size: 65536 }
    p4_param_order: 
      ig_md.src_addr: { type: exact, size: 32, full_size: 32 }
      ig_md.dst_addr: { type: exact, size: 32, full_size: 32 }
    row: [ 7, 6, 5, 4 ]
    bus: [ 0, 0, 0, 0 ]
    column:
    - [ 2, 3, 4, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 6, 7, 8, 9, 10 ]
    - [ 2, 3, 4, 6, 7, 8, 9, 10 ]
    stash: 
      row: [ 7 ]
      col: [ 2 ]
      unit: [ 0 ]
    ways:
      - [0, 0, 0x7, [7, 2], [7, 3], [7, 4], [7, 6], [7, 7], [7, 8], [7, 9], [7, 10]]
      - [0, 1, 0x38, [6, 2], [6, 3], [6, 4], [6, 6], [6, 7], [6, 8], [6, 9], [6, 10]]
      - [0, 2, 0x1c0, [5, 2], [5, 3], [5, 4], [5, 6], [5, 7], [5, 8], [5, 9], [5, 10]]
      - [0, 3, 0xe00, [4, 2], [4, 3], [4, 4], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10]]
    input_xbar:
      exact group 0: { 0: ig_md.dst_addr, 32: ig_md.src_addr }
      hash 0:
        0..7: random(ig_md.dst_addr(13..31), ig_md.src_addr) ^ ig_md.dst_addr(0..7)
        8..9: random(ig_md.dst_addr(13..31), ig_md.src_addr) ^ ig_md.dst_addr(8..9)
        40..42: random(ig_md.dst_addr(13..31), ig_md.src_addr) ^ ig_md.dst_addr(10..12)
        11..18: random(ig_md.dst_addr(13..31), ig_md.src_addr) ^ ig_md.dst_addr(0..7)
        19: random(ig_md.dst_addr(13..31), ig_md.src_addr) ^ ig_md.dst_addr(8)
        10: random(ig_md.dst_addr(13..31), ig_md.src_addr) ^ ig_md.dst_addr(12)
        43..45: random(ig_md.dst_addr(13..31), ig_md.src_addr) ^ ig_md.dst_addr(9..11)
        22..29: random(ig_md.dst_addr(13..31), ig_md.src_addr) ^ ig_md.dst_addr(0..7)
        20..21: random(ig_md.dst_addr(13..31), ig_md.src_addr) ^ ig_md.dst_addr(11..12)
        46..48: random(ig_md.dst_addr(13..31), ig_md.src_addr) ^ ig_md.dst_addr(8..10)
        33..39: random(ig_md.dst_addr(13..31), ig_md.src_addr) ^ ig_md.dst_addr(0..6)
        30..32: random(ig_md.dst_addr(13..31), ig_md.src_addr) ^ ig_md.dst_addr(10..12)
        49: random(ig_md.dst_addr(13..31), ig_md.src_addr) ^ ig_md.dst_addr(7)
        50..51: random(ig_md.dst_addr(13..31), ig_md.src_addr) ^ ig_md.dst_addr(8..9)
      hash group 0:
        table: [0]
        seed: 0x1de3a56245491
    format: { action(0): 0..0, version(0): 80..83, match(0): [85..87, 32..79 ], action(1): 1..1, version(1): 112..115, match(1): [5..7, 88..111, 8..31 ] }
    match: [ ig_md.dst_addr(13..15), ig_md.dst_addr(16..23), ig_md.dst_addr(24..31), ig_md.src_addr(0..7), ig_md.src_addr(8..15), ig_md.src_addr(16..23), ig_md.src_addr(24..31) ]
    match_group_map: [ [ 0, 1 ] ]
    hit: [  tbl_shc_real_time_sketch458 ]
    miss:  tbl_shc_real_time_sketch464
    action: route_tbl_0$action_data($DIRECT, $DEFAULT)
    instruction: route_tbl_0(action, $DEFAULT)
    actions:
      ShcIngress.route_for_nexthop(0, 1):
      - p4_param_order: { nhop_id: 32 }
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000003
      - next_table_miss:  tbl_shc_real_time_sketch464
      - next_table: 0
      - { nhop_id_1.2-15: $adf_f0(0..13), nhop_id.2-15: nhop_id_1.2-15, nhop_id_1.0-1: $adf_f0(14..15), nhop_id.0-1: nhop_id_1.0-1, nhop_id_1.16-31: $adf_f0(16..31), nhop_id.16-31: nhop_id_1.16-31 }
      - set ig_md.nhop_id.0-1, nhop_id.0-1
      - set ig_md.nhop_id.2-15, nhop_id.2-15
      - set ig_md.nhop_id.16-31, nhop_id.16-31
      - set ig_intr_md_for_tm.ucast_egress_port, ig_intr_md.ingress_port
      ShcIngress.route_for_miss(1, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000004
      - next_table_miss:  tbl_shc_real_time_sketch464
      - next_table: 0
      - {  }
      - set ig_intr_md_for_tm.bypass_egress, 1
      - set H1(0..8), 160
    default_action: ShcIngress.route_for_miss
    idletime:
      row: [ 4, 5, 6 ]
      bus: [ 0, 0, 0 ]
      column:
      - [ 0, 1, 2, 3, 4, 5 ]
      - [ 0, 1, 2, 3, 4, 5 ]
      - [ 0, 1, 2, 3 ]
      precision: 2
      sweep_interval: 7
      notification: two_way
      per_flow_enable: false
  action route_tbl_0$action_data:
    p4: { name: ShcIngress.route_tbl$action }
    row: [ 15, 14, 13, 12, 11, 10, 9, 8, 7, 6 ]
    logical_bus: [ A, O, O, O, O, O, O, O, O, O ]
    word: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
    column:
    - 5
    - 5
    - 5
    - 5
    - 5
    - 5
    - 5
    - 5
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 2, 3 ]
    vpns: 
    - [ 0 ]
    - [ 1 ]
    - [ 2 ]
    - [ 3 ]
    - [ 4 ]
    - [ 5 ]
    - [ 6 ]
    - [ 7 ]
    - [ 8, 9, 10, 11, 12, 13 ]
    - [ 14, 15 ]
    home_row:
    - 15
    format ShcIngress.route_for_nexthop: { $adf_f0: 0..31 }
    action_bus: { 96..99 : $adf_f0 }
stage 2 ingress:
  dependency: action
  ternary_match tbl_shc_real_time_sketch458 0:
    p4: { name: tbl_shc_real_time_sketch458, hidden: true }
    hit: [  tbl_shc_real_time_sketch464 ]
    miss:  tbl_shc_real_time_sketch464
    indirect: tbl_shc_real_time_sketch458$tind
  ternary_indirect tbl_shc_real_time_sketch458$tind:
    row: 0
    bus: 0
    format: { action: 0..0 }
    instruction: tbl_shc_real_time_sketch458$tind(action, $DEFAULT)
    actions:
      shc_real_time_sketch458(0, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000005
      - next_table: 0
      - set ig_md.table_hit, 1
    default_action: shc_real_time_sketch458
  hash_action tbl_shc_real_time_sketch464 1:
    p4: { name: tbl_shc_real_time_sketch464, hidden: true }
    row: 0
    result_bus: 1
    hash_dist:
      0: { hash: 0, mask: 0xffff, shift: 0 }
    input_xbar:
      exact group 0: { 0: ig_md.dst_addr, 32: ig_md.src_addr }
      hash 0:
        0..15: slice(random(ig_md.dst_addr, ig_md.src_addr), 0..15)
      hash group 0:
        table: [0]
        seed: 0xeaa3
    gateway:
      name: tbl_shc_real_time_sketch464-gateway
      row: 1
      bus: 0
      unit: 0
      0x0:  sk_get_fingerprint_table
      miss:  sk_get_fingerprint_table
      condition: 
        expression: "true(always hit)"
        true:  sk_get_fingerprint_table
        false:  sk_get_fingerprint_table
    next: []
    action_bus: { 96..99 : hash_dist(0) }
    instruction: tbl_shc_real_time_sketch464($DEFAULT, $DEFAULT)
    actions:
      shc_real_time_sketch464(0, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000006
      - next_table: 0
      - set W10(0..15), hash_dist(0, 0..15)
    default_action: shc_real_time_sketch464
  hash_action sk_get_fingerprint_table 2:
    p4: { name: ShcIngress.sk.get_fingerprint_table, size: 1 }
    row: 0
    result_bus: 0
    hash_dist:
      1: { hash: 0, mask: 0xffff, shift: 0 }
    input_xbar:
      exact group 0: { 0: ig_md.dst_addr, 32: ig_md.src_addr }
      hash 0:
        16..31: slice(stripe(crc_rev(0xc002, 0x0, 0x0, 64, { 0: ig_md.dst_addr, 32: ig_md.src_addr }, { })), 0..15)
      hash group 0:
        table: [0]
        seed: 0x0
    gateway:
      name: sk_get_fingerprint_table-gateway
      row: 0
      bus: 0
      unit: 1
      0x0:  tbl_shc_real_time_sketch476
      miss:  tbl_shc_real_time_sketch476
      condition: 
        expression: "true(always hit)"
        true:  tbl_shc_real_time_sketch476
        false:  tbl_shc_real_time_sketch476
    next: []
    action_bus: { 100..103 : hash_dist(1) }
    instruction: sk_get_fingerprint_table($DEFAULT, $DEFAULT)
    actions:
      ShcIngress.sk.get_hash_value(0, 3):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000010
      - next_table: 0
      - set W13(16..31), hash_dist(1, 0..15)
    default_action: ShcIngress.sk.get_hash_value
  ternary_match tbl_shc_real_time_sketch476 3:
    p4: { name: tbl_shc_real_time_sketch476, hidden: true }
    gateway:
      name: cond-10
      input_xbar:
        exact group 0: { 70: hdr.cuckoo_hashes.$valid }
      row: 0
      bus: 0
      unit: 0
      match: { 6: hdr.cuckoo_hashes.$valid }
      0b*1:  tbl_shc_real_time_sketch468
      miss: run_table
      condition: 
        expression: "(hdr.cuckoo_hashes.$valid == 1)"
        true:  tbl_shc_real_time_sketch468
        false:  tbl_shc_real_time_sketch476
    hit: [  tbl_shc_real_time_sketch476_0 ]
    miss:  tbl_shc_real_time_sketch476_0
    indirect: tbl_shc_real_time_sketch476$tind
  ternary_indirect tbl_shc_real_time_sketch476$tind:
    row: 0
    bus: 1
    format: { action: 0..0 }
    instruction: tbl_shc_real_time_sketch476$tind(action, $DEFAULT)
    actions:
      shc_real_time_sketch476(1, 4):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x2000000d
      - next_table: 0
      - set ig_md.cuckoo_hash_index.16-31, 0
    default_action: shc_real_time_sketch476
stage 3 ingress:
  dependency: match
  ternary_match tbl_shc_real_time_sketch468 1:
    p4: { name: tbl_shc_real_time_sketch468, hidden: true }
    gateway:
      name: cond-11
      input_xbar:
        exact group 0: { 1: ig_md.table_hit }
      row: 7
      bus: 0
      unit: 0
      match: { 1: ig_md.table_hit }
      0b******1: run_table
      miss:  cuckoo_hash_chose_table_0
      condition: 
        expression: "(ig_md.table_hit == 1)"
        true:  tbl_shc_real_time_sketch468
        false:  cuckoo_hash_chose_table_0
    hit: [  sk_update_pkt_1_table ]
    miss:  sk_update_pkt_1_table
    indirect: tbl_shc_real_time_sketch468$tind
  ternary_indirect tbl_shc_real_time_sketch468$tind:
    row: 0
    bus: 0
    format: { action: 0..0 }
    instruction: tbl_shc_real_time_sketch468$tind(action, $DEFAULT)
    actions:
      shc_real_time_sketch468(1, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000007
      - next_table: 0
      - set ig_md.cuckoo_hash_index.16-31, ig_md.nhop_id.16-31
      - deposit-field W11(0..1), W10(16..17), W12
    default_action: shc_real_time_sketch468
  exact_match cuckoo_hash_chose_table_0 2:
    p4: { name: ShcIngress.cuckoo_hash_chose_table, size: 4 }
    p4_param_order: 
      ig_md.cuckoo_hash_tmp: { type: exact, size: 2, full_size: 16, key_name: "ig_md.cuckoo_hash_chose" }
    row: 7
    bus: 0
    column: 2
    stash: 
      row: [ 7 ]
      col: [ 2 ]
      unit: [ 0 ]
    ways:
      - [0, 0, 0x0, [7, 2]]
    input_xbar:
      exact group 0: { 32: ig_md.cuckoo_hash_tmp(0..1) }
      hash 0:
        0..1: ig_md.cuckoo_hash_tmp(0..1)
      hash group 0:
        table: [0]
        seed: 0x0
    format: { action(0): 0..2, version(0): 112..115 }
    match_group_map: [ [ 0 ] ]
    hit: [  sk_update_pkt_1_table ]
    miss:  sk_update_pkt_1_table
    context_json:
      static_entries:
      - priority: 0
        match_key_fields_values:
        - field_name: ig_md.cuckoo_hash_chose
          value: "0x0"
        action_handle: 0x20000009
        is_default_entry: false
        action_parameters_values: []
      - priority: 1
        match_key_fields_values:
        - field_name: ig_md.cuckoo_hash_chose
          value: "0x1"
        action_handle: 0x2000000a
        is_default_entry: false
        action_parameters_values: []
      - priority: 2
        match_key_fields_values:
        - field_name: ig_md.cuckoo_hash_chose
          value: "0x2"
        action_handle: 0x2000000b
        is_default_entry: false
        action_parameters_values: []
      - priority: 3
        match_key_fields_values:
        - field_name: ig_md.cuckoo_hash_chose
          value: "0x3"
        action_handle: 0x2000000c
        is_default_entry: false
        action_parameters_values: []
    instruction: cuckoo_hash_chose_table_0(action, $DEFAULT)
    actions:
      NoAction(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000008
      - next_table: 0
      ShcIngress.cuckoo_hash_chose_1(1, 4):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000009
      - next_table: 0
      - set ig_md.cuckoo_hash_index.0-15, hdr.cuckoo_hashes.cuckoo_hash1(0..15)
      - set ig_md.cuckoo_hash_index.16-31, hdr.cuckoo_hashes.cuckoo_hash1(16..31)
      ShcIngress.cuckoo_hash_chose_2(2, 6):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x2000000a
      - next_table: 0
      - set ig_md.cuckoo_hash_index.0-15, hdr.cuckoo_hashes.cuckoo_hash2(0..15)
      - set ig_md.cuckoo_hash_index.16-31, hdr.cuckoo_hashes.cuckoo_hash2(16..31)
      ShcIngress.cuckoo_hash_chose_3(3, 8):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x2000000b
      - next_table: 0
      - set ig_md.cuckoo_hash_index.0-15, hdr.cuckoo_hashes.cuckoo_hash3(0..15)
      - set ig_md.cuckoo_hash_index.16-31, hdr.cuckoo_hashes.cuckoo_hash3(16..31)
      ShcIngress.cuckoo_hash_chose_4(4, 10):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x2000000c
      - next_table: 0
      - set ig_md.cuckoo_hash_index.0-15, hdr.cuckoo_hashes.cuckoo_hash4(0..15)
      - set ig_md.cuckoo_hash_index.16-31, hdr.cuckoo_hashes.cuckoo_hash4(16..31)
    default_action: NoAction
  ternary_match tbl_shc_real_time_sketch476_0 0:
    p4: { name: tbl_shc_real_time_sketch476_0, hidden: true }
    hit: [  sk_update_pkt_1_table ]
    miss:  sk_update_pkt_1_table
    indirect: tbl_shc_real_time_sketch476_0$tind
  ternary_indirect tbl_shc_real_time_sketch476_0$tind:
    row: 0
    bus: 1
    format: { action: 0..0, immediate: 1..16 }
    action_bus: { 96..99 : immediate(0..15) }
    instruction: tbl_shc_real_time_sketch476_0$tind(action, $DEFAULT)
    actions:
      shc_real_time_sketch476_0(0, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x2000000e
      - next_table: 0
      - { $constant0: immediate(0..15), $constant0: 16383 }
      - and W11, $constant0, W10
    default_action: shc_real_time_sketch476_0
stage 4 ingress:
  dependency: match
  hash_action sk_update_pkt_1_table 0:
    p4: { name: ShcIngress.sk.update_pkt_1_table, size: 1 }
    row: 0
    result_bus: 0
    hash_dist:
      0: { hash: 0, mask: 0xffff, shift: 4 }
    input_xbar:
      exact group 0: { 0: ig_md.cuckoo_hash_index.0-15 }
      hash 0:
        0..15: ig_md.cuckoo_hash_index.0-15
      hash group 0:
        table: [0]
        seed: 0x0
    gateway:
      name: sk_update_pkt_1_table-gateway
      row: 0
      bus: 0
      unit: 0
      0x0:  sk_update_pkt_num_1_table
      miss:  sk_update_pkt_num_1_table
      condition: 
        expression: "true(always hit)"
        true:  sk_update_pkt_num_1_table
        false:  sk_update_pkt_num_1_table
    next: []
    action_bus: { 0 : sk_update_pkt_1_table$salu.ShcIngress.sk.hash1_1(0..7) }
    stateful: sk_update_pkt_1_table$salu.ShcIngress.sk.hash1_1(hash_dist 0, $DEFAULT, $DEFAULT)
    instruction: sk_update_pkt_1_table($DEFAULT, $DEFAULT)
    actions:
      ShcIngress.sk.update_pkt_1(0, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000011
      - next_table: 0
      - set ig_md.fp_cmp_re, sk_update_pkt_1_table$salu.ShcIngress.sk.hash1_1
      - set ig_md.hash_index_done, 1
      - sk_update_pkt_1_table$salu.ShcIngress.sk.hash1_1(sk_pkt_update, $hash_dist)
    default_action: ShcIngress.sk.update_pkt_1
  stateful sk_update_pkt_1_table$salu.ShcIngress.sk.hash1_1:
    p4: { name: ShcIngress.sk.hash1_1, size: 65536 }
    row: [ 15, 13 ]
    logical_bus: [ S, O ]
    column:
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    maprams: 
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    home_row: 15
    input_xbar:
      exact group 0: { 80: ig_md.fingerprint }
    data_bytemask: 12
    format: { lo: 16 }
    actions:
      sk_pkt_update:
      - equ lo, phv_hi, -lo
      - alu_a cmplo, hi, 1
      - alu_a !cmplo, lo, phv_hi
      - output cmplo, alu_hi
stage 5 ingress:
  dependency: match
  hash_action sk_update_pkt_num_1_table 0:
    p4: { name: ShcIngress.sk.update_pkt_num_1_table, size: 1 }
    row: 0
    result_bus: 0
    hash_dist:
      0: { hash: 1, mask: 0xffff, shift: 3 }
    input_xbar:
      exact group 0: { 64: ig_md.cuckoo_hash_index.0-15 }
      hash 1:
        0..15: ig_md.cuckoo_hash_index.0-15
      hash group 1:
        table: [1]
        seed: 0x0
    gateway:
      name: cond-12
      input_xbar:
        exact group 0: { 15: ig_md.hash_index_done }
      row: 0
      bus: 0
      unit: 0
      payload_row: 0
      payload_unit: 0
      payload: 0x7
      format: { action: 0..0, meter_pfe: 1..1, meter_type: 2..4 }
      match: { 7: ig_md.hash_index_done }
      0x1:  tbl_shc_real_time_sketch296
      miss: run_table
      condition: 
        expression: "(ig_md.hash_index_done == 1)"
        true:  tbl_shc_real_time_sketch296
        false:  tbl_shc_real_time_sketch483
    next:  tbl_shc_real_time_sketch483
    action_bus: { 96..99 : sk_update_pkt_num_1_table$salu.ShcIngress.sk.hash1_1_n(0..31) }
    stateful: sk_update_pkt_num_1_table$salu.ShcIngress.sk.hash1_1_n(hash_dist 0, meter_pfe, meter_type)
    instruction: sk_update_pkt_num_1_table(action, $DEFAULT)
    actions:
      ShcIngress.sk.update_pkt_num_1(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000012
      - next_table: 0
      - set ig_md.cs_count, sk_update_pkt_num_1_table$salu.ShcIngress.sk.hash1_1_n
      - sk_update_pkt_num_1_table$salu.ShcIngress.sk.hash1_1_n(sk_pkt_num_0, $hash_dist)
    default_action: ShcIngress.sk.update_pkt_num_1
  stateful sk_update_pkt_num_1_table$salu.ShcIngress.sk.hash1_1_n:
    p4: { name: ShcIngress.sk.hash1_1_n, size: 65536 }
    row: 15
    logical_bus: S
    column: [ 0, 1, 2, 3, 4 ]
    maprams: [ 0, 1, 2, 3, 4 ]
    home_row: 15
    input_xbar:
      exact group 0: { 3: ig_md.fp_cmp_re }
      hash 0:
        0: ig_md.fp_cmp_re
      hash group 0:
        table: [0]
        seed: 0x0
    hash_bytemask: 1
    format: { lo: 8 }
    initial_value: { lo: 1 , hi: 0 }
    actions:
      sk_pkt_num_0:
      - equ lo, phv_lo, -1
      - saddu cmplo, lo, lo, 1
      - alu_a !cmplo, lo, 1
      - output alu_lo
stage 6 ingress:
  dependency: match
  ternary_match tbl_shc_real_time_sketch296 0:
    p4: { name: tbl_shc_real_time_sketch296, hidden: true }
    gateway:
      name: cond-13
      input_xbar:
        exact group 0: { 18: ig_md.cs_count }
      row: 0
      bus: 0
      unit: 0
      match: { 2: ig_md.cs_count(0..5), 8: ig_md.cs_count(6..7) }
      0b******00001010: run_table
      miss:  tbl_shc_real_time_sketch299
      condition: 
        expression: "(ig_md.cs_count == 10)"
        true:  tbl_shc_real_time_sketch296
        false:  tbl_shc_real_time_sketch299
    hit: [  tbl_shc_real_time_sketch483 ]
    miss:  tbl_shc_real_time_sketch483
    indirect: tbl_shc_real_time_sketch296$tind
  ternary_indirect tbl_shc_real_time_sketch296$tind:
    row: 0
    bus: 0
    format: { action: 0..0 }
    instruction: tbl_shc_real_time_sketch296$tind(action, $DEFAULT)
    actions:
      shc_real_time_sketch296(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000013
      - next_table: 0
      - set ig_md.eflag, 1
    default_action: shc_real_time_sketch296
  ternary_match tbl_shc_real_time_sketch299 1:
    p4: { name: tbl_shc_real_time_sketch299, hidden: true }
    hit: [  tbl_shc_real_time_sketch483 ]
    miss:  tbl_shc_real_time_sketch483
    indirect: tbl_shc_real_time_sketch299$tind
  ternary_indirect tbl_shc_real_time_sketch299$tind:
    row: 0
    bus: 1
    format: { action: 0..0 }
    instruction: tbl_shc_real_time_sketch299$tind(action, $DEFAULT)
    actions:
      shc_real_time_sketch299(0, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000014
      - next_table: 0
      - set ig_md.eflag, 0
    default_action: shc_real_time_sketch299
stage 7 ingress:
  dependency: match
  ternary_match tbl_shc_real_time_sketch483 0:
    p4: { name: tbl_shc_real_time_sketch483, hidden: true }
    gateway:
      name: cond-14
      input_xbar:
        exact group 0: { 1: ig_md.table_hit, 2: ig_md.eflag }
      row: 0
      bus: 0
      unit: 0
      match: { 2: ig_md.eflag, 1: ig_md.table_hit }
      0b*****10: run_table
      miss:  tbl_shc_real_time_sketch491
      condition: 
        expression: "(ig_md.eflag == 1 && ig_md.table_hit == 0)"
        true:  tbl_shc_real_time_sketch483
        false:  tbl_shc_real_time_sketch491
    hit: [  END ]
    miss:  END
    indirect: tbl_shc_real_time_sketch483$tind
  ternary_indirect tbl_shc_real_time_sketch483$tind:
    row: 0
    bus: 0
    format: { action: 0..0 }
    instruction: tbl_shc_real_time_sketch483$tind(action, $DEFAULT)
    actions:
      shc_real_time_sketch483(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000015
      - next_table: 0
      - set ig_intr_md_for_dprsr.digest_type, 1
    default_action: shc_real_time_sketch483
  ternary_match tbl_shc_real_time_sketch491 1:
    p4: { name: tbl_shc_real_time_sketch491, hidden: true }
    hit: [  END ]
    miss:  END
    indirect: tbl_shc_real_time_sketch491$tind
  ternary_indirect tbl_shc_real_time_sketch491$tind:
    row: 0
    bus: 1
    format: { action: 0..0 }
    instruction: tbl_shc_real_time_sketch491$tind(action, $DEFAULT)
    actions:
      shc_real_time_sketch491(0, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000016
      - next_table: 0
      - set ig_intr_md_for_dprsr.digest_type, 0
    default_action: shc_real_time_sketch491


primitives: "/share_test/build/thirdparty/p4/src/build/shc_real_time_sketch/tofino/pipe//shc_real_time_sketch.prim.json"
dynhash: "/share_test/build/thirdparty/p4/src/build/shc_real_time_sketch/tofino/pipe//shc_real_time_sketch.dynhash.json"
